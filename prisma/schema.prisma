// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime @default(now())

  links            Link[]
  qrCodes          QRCode[]
  orders           Order[]
  admin            Admin?

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  features    String   // JSON string of features array
  image       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id            String        @id @default(cuid())
  userId        String?
  email         String        // Email du client (même s'il n'est pas inscrit)
  mollieId      String?       @unique // ID du paiement Mollie
  status        OrderStatus   @default(PENDING)
  totalAmount   Float
  currency      String        @default("EUR")
  shippingInfoId String?      @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  items         OrderItem[]
  qrCodes       QRCode[]
  shippingInfo  ShippingInfo? @relation(fields: [shippingInfoId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Link {
  id              String   @id @default(cuid())
  userId          String

  googleReviewUrl String
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  qrCode          QRCode?

  @@map("links")
}

model ShippingInfo {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  company     String?
  address     String
  address2    String?
  city        String
  postalCode  String
  country     String
  phone       String
  email       String
  status      ShippingStatus @default(PENDING)
  trackingNumber String?
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order       Order?

  @@map("shipping_info")
}

model Admin {
  id    String @id @default(cuid())
  email String @unique
  role  Role   @default(SUPPORT)
  user  User   @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("admins")
}

model SuperAdmin {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("super_admins")
}

model QRCode {
  id        String   @id @default(uuid())
  code      String   @unique // Code alphanumérique unique, uppercase
  month     Int      // Mois de génération (1-12)
  year      Int      // Année de génération
  imageUrl  String?  @db.LongText // URL ou base64 de l'image du QR code
  createdAt DateTime @default(now())
  isActivated Boolean @default(false)
  activatedAt DateTime? // Date d'activation du QR code
  activatedBy String?   // ID de l'utilisateur qui a activé le QR code
  linkId    String?  @unique // ID du lien Google associé
  orderId   String?  // ID de la commande qui a généré ce QR code
  
  user      User?    @relation(fields: [activatedBy], references: [id], onDelete: SetNull)
  link      Link?    @relation(fields: [linkId], references: [id], onDelete: SetNull)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
}

enum Role {
  ADMIN
  SUPPORT
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

